name: Build and Test All Cases

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: self-hosted
    timeout-minutes: 30
    strategy:
      matrix:
        case: [collision, thermal, gravity, density_current, injection]
      max-parallel: 3
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build ${{ matrix.case }} case
      run: |
        cd c/build
        bash -c "source ./my_cmake_scripts/cmake_andes_gnu_cpu_${{ matrix.case }}.sh"
        make
    
    - name: Upload build artifacts for ${{ matrix.case }}
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.case }}
        path: c/build/
        retention-days: 1

  test:
    runs-on: self-hosted
    timeout-minutes: 45
    needs: build
    strategy:
      matrix:
        case: [collision, thermal, gravity, density_current, injection]
      max-parallel: 2
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts for ${{ matrix.case }}
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ matrix.case }}
        path: c/build/
    
    - name: Restore executable permissions
      run: |
        chmod +x c/build/*
    
    - name: Run basic tests for ${{ matrix.case }}
      run: |
        cd c/build
        make test
    
    - name: Run executables and generate outputs for ${{ matrix.case }}
      run: |
        cd c/build
        
        # Set shorter timeout for CI runs
        timeout_cmd="timeout 300"  # 5 minute timeout per executable
        
        echo "Running serial executable..."
        if [ -f "./serial" ]; then
          if $timeout_cmd ./serial; then
            if [ -f "./output.nc" ]; then
              mv ./output.nc ./serial_${{ matrix.case }}.nc
              echo "Serial output saved as serial_${{ matrix.case }}.nc"
            else
              echo "Warning: serial did not produce output.nc"
            fi
          else
            echo "Warning: serial execution timed out or failed"
          fi
        else
          echo "Warning: serial executable not found"
        fi
        
        echo "Running OpenACC executable..."
        if [ -f "./openacc" ]; then
          if $timeout_cmd ./openacc; then
            if [ -f "./output.nc" ]; then
              mv ./output.nc ./openacc_${{ matrix.case }}.nc
              echo "OpenACC output saved as openacc_${{ matrix.case }}.nc"
            else
              echo "Warning: openacc did not produce output.nc"
            fi
          else
            echo "Warning: openacc execution timed out or failed"
          fi
        else
          echo "Warning: openacc executable not found"
        fi
        
        echo "Running CUDA executable..."
        if [ -f "./cuda" ]; then
          if $timeout_cmd ./cuda; then
            if [ -f "./output.nc" ]; then
              mv ./output.nc ./cuda_${{ matrix.case }}.nc
              echo "CUDA output saved as cuda_${{ matrix.case }}.nc"
            else
              echo "Warning: cuda did not produce output.nc"
            fi
          else
            echo "Warning: cuda execution timed out or failed"
          fi
        else
          echo "Warning: cuda executable not found"
        fi
        
        echo "Listing generated NetCDF files:"
        ls -la *.nc || echo "No NetCDF files found"
    
    - name: Validate outputs for ${{ matrix.case }}
      run: |
        cd c/build
        
        # Check which executables produced outputs
        HAS_SERIAL=false
        HAS_OPENACC=false  
        HAS_CUDA=false
        
        if [ -f "./serial_${{ matrix.case }}.nc" ]; then
          HAS_SERIAL=true
          echo "Found serial output"
        fi
        
        if [ -f "./openacc_${{ matrix.case }}.nc" ]; then
          HAS_OPENACC=true
          echo "Found OpenACC output"
        fi
        
        if [ -f "./cuda_${{ matrix.case }}.nc" ]; then
          HAS_CUDA=true
          echo "Found CUDA output"
        fi
        
        # Run validation if we have all three outputs
        if [ "$HAS_SERIAL" = true ] && [ "$HAS_OPENACC" = true ] && [ "$HAS_CUDA" = true ]; then
          echo "Running 3-way validation..."
          python validate_netcdf.py serial_${{ matrix.case }}.nc openacc_${{ matrix.case }}.nc cuda_${{ matrix.case }}.nc
          echo "Validation completed for ${{ matrix.case }} case"
        else
          echo "Skipping validation - not all three outputs available"
          echo "Available: Serial=$HAS_SERIAL, OpenACC=$HAS_OPENACC, CUDA=$HAS_CUDA"
        fi
    
    - name: Upload simulation outputs for ${{ matrix.case }}
      uses: actions/upload-artifact@v4
      with:
        name: simulation-outputs-${{ matrix.case }}
        path: c/build/*.nc
        retention-days: 7
