name: Build, Test, and Simulate All Cases

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: self-hosted
    timeout-minutes: 30
    strategy:
      matrix:
        case: [collision, thermal, gravity, density_current, injection]
      max-parallel: 3
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build ${{ matrix.case }} case
      run: |
        # Source environment setup if available
        if [ -f ~/env.sh ]; then
          source ~/env.sh
        fi
        cd c/build
        bash -c "source ./my_cmake_scripts/cmake_andes_gnu_cpu_${{ matrix.case }}.sh"
        make
        
        # Create case-specific directory and copy executables
        mkdir -p case_results/${{ matrix.case }}
        for exe in serial mpi openmp openacc cuda; do
          if [ -f "${exe}" ]; then
            cp "${exe}" "case_results/${{ matrix.case }}/${exe}_${{ matrix.case }}"
            echo "Copied ${exe} -> case_results/${{ matrix.case }}/${exe}_${{ matrix.case }}"
          fi
          if [ -f "${exe}_test" ]; then
            cp "${exe}_test" "case_results/${{ matrix.case }}/${exe}_test_${{ matrix.case }}"
            echo "Copied ${exe}_test -> case_results/${{ matrix.case }}/${exe}_test_${{ matrix.case }}"
          fi
        done
    
    - name: Upload build artifacts for ${{ matrix.case }}
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.case }}
        path: c/build/
        retention-days: 1

  unit-tests:
    runs-on: self-hosted
    timeout-minutes: 15
    needs: build
    strategy:
      matrix:
        case: [collision, thermal, gravity, density_current, injection]
      max-parallel: 4
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts for ${{ matrix.case }}
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ matrix.case }}
        path: c/build/
    
    - name: Restore executable permissions
      run: |
        chmod +x c/build/*
    
    - name: Run unit tests for ${{ matrix.case }}
      run: |
        # Source environment setup if available
        if [ -f ~/env.sh ]; then
          source ~/env.sh
        fi
        cd c/build
        
        # Set up MPI test command without re-running cmake
        export TEST_MPI_COMMAND="mpirun -n 1"
        echo "Set TEST_MPI_COMMAND to: $TEST_MPI_COMMAND"
        
        # Check what executables exist (should be from previous build step)
        echo "Available executables:"
        ls -la | grep -E "(serial|mpi|openmp|openacc|cuda)" || echo "No executables found"
        
        # Check test executables specifically
        echo "Test executables:"
        ls -la *_test 2>/dev/null || echo "No test executables found"
        
        # Run tests with verbose output
        if ! make test; then
          echo "=== TESTS FAILED ==="
          # Show the test log if available
          if [ -f Testing/Temporary/LastTest.log ]; then
            echo "=== Test Log ==="
            cat Testing/Temporary/LastTest.log
          fi
          echo "Test failure detected - failing CI job"
          exit 1
        else
          echo "=== ALL TESTS PASSED ==="
        fi

  simulation:
    runs-on: self-hosted
    timeout-minutes: 45
    needs: unit-tests
    strategy:
      matrix:
        case: [collision, thermal, gravity, density_current, injection]
      max-parallel: 2
      fail-fast: false
    env:
      WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts for ${{ matrix.case }}
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ matrix.case }}
        path: c/build/
    
    - name: Restore executable permissions
      run: |
        chmod +x c/build/*
    
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-wandb
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        pip3 install wandb
    
    - name: Run full simulation for ${{ matrix.case }}
      run: |
        # Source environment setup if available
        if [ -f ~/env.sh ]; then
          source ~/env.sh
        fi
        cd c/build/case_results/${{ matrix.case }}
        
        # Collect available executables for benchmarking
        executables=()
        if [ -f "./serial_${{ matrix.case }}" ]; then
          executables+=("serial_${{ matrix.case }}")
        fi
        if [ -f "./openacc_${{ matrix.case }}" ]; then
          executables+=("openacc_${{ matrix.case }}")
        fi
        if [ -f "./cuda_${{ matrix.case }}" ]; then
          executables+=("cuda_${{ matrix.case }}")
        fi
        
        if [ ${#executables[@]} -eq 0 ]; then
          echo "Warning: No executables found for ${{ matrix.case }}"
          exit 1
        fi
        
        echo "Found executables: ${executables[*]}"
        
        # Ensure executables have execute permissions
        for exe in "${executables[@]}"; do
          chmod +x "./${exe}"
        done
        
        # Run benchmarking script with timing and W&B logging
        python3 ../../bench_simulation.py --case ${{ matrix.case }} "${executables[@]}"
        
        echo "Listing generated NetCDF files:"
        ls -la *.nc || echo "No NetCDF files found"
        
        # The bench_simulation.py script creates files like serial_collision.nc
        # We need to copy them to the build directory for validation and artifacts
        for exe in "${executables[@]}"; do
          if [ -f "./${exe}.nc" ]; then
            cp "./${exe}.nc" ../../
            echo "Copied ${exe}.nc to build directory"
          else
            echo "Warning: ${exe}.nc not found after benchmarking"
          fi
        done
    
    - name: Cache Python dependencies for validation
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-netcdf4
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies for validation
      run: |
        pip3 install netCDF4
    
    - name: Validate simulation outputs for ${{ matrix.case }}
      run: |
        # Source environment setup if available
        if [ -f ~/env.sh ]; then
          source ~/env.sh
        fi
        cd c/build
        
        # Check which executables produced outputs
        HAS_SERIAL=false
        HAS_OPENACC=false  
        HAS_CUDA=false
        
        if [ -f "./serial_${{ matrix.case }}.nc" ]; then
          HAS_SERIAL=true
          echo "Found serial output"
        fi
        
        if [ -f "./openacc_${{ matrix.case }}.nc" ]; then
          HAS_OPENACC=true
          echo "Found OpenACC output"
        fi
        
        if [ -f "./cuda_${{ matrix.case }}.nc" ]; then
          HAS_CUDA=true
          echo "Found CUDA output"
        fi
        
        # Run validation if we have all three outputs
        if [ "$HAS_SERIAL" = true ] && [ "$HAS_OPENACC" = true ] && [ "$HAS_CUDA" = true ]; then
          echo "Running 3-way validation..."
          python3 validate_netcdf.py serial_${{ matrix.case }}.nc openacc_${{ matrix.case }}.nc cuda_${{ matrix.case }}.nc
          echo "Validation completed for ${{ matrix.case }} case"
        else
          echo "Skipping validation - not all three outputs available"
          echo "Available: Serial=$HAS_SERIAL, OpenACC=$HAS_OPENACC, CUDA=$HAS_CUDA"
        fi
    
    - name: Upload simulation outputs for ${{ matrix.case }}
      uses: actions/upload-artifact@v4
      with:
        name: simulation-outputs-${{ matrix.case }}
        path: c/build/*.nc
        retention-days: 7
